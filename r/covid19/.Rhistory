library(googledrive)
library(googlesheets4)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
install.packages("devtools")
library("devtools")
library(googledrive)
library(googlesheets4)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
install.packages("plotly")
library(googledrive)
library(googlesheets4)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
library(htmlwidgets)
drive_deauth()
sheets_deauth()
coronaURL <- "https://docs.google.com/spreadsheets/d/1wQVypefm946ch4XDp37uZ-wartW4V7ILdg-qYiDXUHM"
nsheets <- sheets_get(as_id(coronaURL)) %>%
extract2(6) %>% # gets the sixth element in a list
nrow()
# j <- sheets_read(as_id(coronaURL), sheet = i)
# variables to retain or create
numvars <- c("Confirmed", "Deaths", "Recovered")
varlist <- c("Province/State", "Country/Region",
"Last Update", numvars)
# one cool trick to initialize a tibble
coronaData <- varlist %>%
map_dfr( ~tibble(!!.x := logical() ) )
# add data from Google sheet to tibble
for (i in 1:(nsheets-1)) {
j <- sheets_read(as_id(coronaURL), sheet = i)
# if a variable doesn't exist in sheet, add it
j[setdiff(varlist,names(j))] <- NA
j %<>% select(varlist)
coronaData <- rbind(coronaData, j)
}
# the first (earliest) sheet had different var names
for (i in (nsheets):(nsheets)) {
j <- sheets_read(as_id(coronaURL), sheet = i) %>%
mutate(`Last Update` = `Date last updated`)
# if a variable doesn't exist in sheet, add it
j[setdiff(varlist,names(j))] <- NA
j %<>% select(varlist)
coronaData <- rbind(coronaData, j)
}
coronaData %<>%
# a
mutate (`Province/State` = case_when(
(is.na(`Province/State`) &
(`Country/Region` == "Australia")) ~ "New South Wales",
(is.na(`Province/State`) &
(`Country/Region` == "Germany")) ~ "Bavaria",
TRUE ~ `Province/State`)) %>%
mutate (`Country/Region` = case_when(
`Province/State` == "Hong Kong" ~ "Hong Kong",
`Province/State` == "Taiwan" ~ "Taiwan",
`Province/State` == "Washington" ~ "US",
# b
is.na (`Country/Region`) ~ "Mainland China",
TRUE ~ `Country/Region`)) %>%
# c
mutate(place = ifelse(is.na(`Province/State`),
`Country/Region`,
paste0(`Province/State`,", ",
`Country/Region`))) %>%
# d
mutate(reportDate =
date(`Last Update`)) %>%
group_by(place,reportDate) %>%
# e
slice(which.max(`Last Update`)) %>%
select(-c(place,`Last Update`)) %>%
ungroup() %>%
# fill in missing dates for each place
# f
group_by(place) %>%
complete(reportDate = seq.Date(min(reportDate),
today(),
by="day")) %>%
fill(c(Confirmed,Deaths,Recovered,
`Country/Region`,`Province/State`)) %>%
# g
mutate_if(is.numeric, ~replace_na(., 0)) %>%
ungroup() %>%
# h
mutate(dropcase = ((!str_detect(`Province/State`,",")) &
(reportDate  > "2020-01-31") &
(`Country/Region` == "Canada" | `Country/Region` == "US"))) %>%
# dplyr called explicitly here because plotly has taken over 'filter'
dplyr::filter (!dropcase)
library(googledrive)
library(googlesheets4)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
library(htmlwidgets)
drive_deauth()
sheets_deauth()
coronaURL <- "https://docs.google.com/spreadsheets/d/1wQVypefm946ch4XDp37uZ-wartW4V7ILdg-qYiDXUHM"
nsheets <- sheets_get(as_id(coronaURL)) %>%
extract2(6) %>% # gets the sixth element in a list
nrow()
# j <- sheets_read(as_id(coronaURL), sheet = i)
# variables to retain or create
numvars <- c("Confirmed", "Deaths", "Recovered")
varlist <- c("Province/State", "Country/Region",
"Last Update", numvars)
# one cool trick to initialize a tibble
coronaData <- varlist %>%
map_dfr( ~tibble(!!.x := logical() ) )
# add data from Google sheet to tibble
for (i in 1:(nsheets-1)) {
j <- sheets_read(as_id(coronaURL), sheet = i)
# if a variable doesn't exist in sheet, add it
j[setdiff(varlist,names(j))] <- NA
j %<>% select(varlist)
coronaData <- rbind(coronaData, j)
}
library(googledrive)
library(googlesheets4)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
library(htmlwidgets)
drive_deauth()
sheets_deauth()
coronaURL <- "https://docs.google.com/spreadsheets/d/1wQVypefm946ch4XDp37uZ-wartW4V7ILdg-qYiDXUHM"
nsheets <- sheets_get(as_id(coronaURL)) %>%
extract2(6) %>% # gets the sixth element in a list
nrow()
# one cool trick to initialize a tibble
coronaData <- varlist %>%
map_dfr( ~tibble(!!.x := logical() ) )
library(googledrive)
library(googlesheets4)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
library(htmlwidgets)
drive_deauth()
sheets_deauth()
coronaURL <- "https://docs.google.com/spreadsheets/d/1wQVypefm946ch4XDp37uZ-wartW4V7ILdg-qYiDXUHM"
nsheets <- sheets_get(as_id(coronaURL)) %>%
extract2(6) %>% # gets the sixth element in a list
nrow()
nsheets <- sheets_get(as_id(coronaURL)) %>%
extract2(6) %>% # gets the sixth element in a list
nrow()
# variables to retain or create
numvars <- c("Confirmed", "Deaths", "Recovered")
varlist <- c("Province/State", "Country/Region",
"Last Update", numvars)
# one cool trick to initialize a tibble
coronaData <- varlist %>%
map_dfr( ~tibble(!!.x := logical() ) )
# add data from Google sheet to tibble
for (i in 1:(nsheets-1)) {
j <- sheets_read(as_id(coronaURL), sheet = i)
# if a variable doesn't exist in sheet, add it
j[setdiff(varlist,names(j))] <- NA
j %<>% select(varlist)
coronaData <- rbind(coronaData, j)
}
# add data from Google sheet to tibble
for (i in 1:(nsheets-1)) {
j <- sheets_read(as_id(coronaURL), sheet = i)
# if a variable doesn't exist in sheet, add it
j[setdiff(varlist,names(j))] <- NA
j %<>% select(varlist)
coronaData <- rbind(coronaData, j)
}
coronaData
View(coronaData)
numvars
varList
varlist
i
j
varlist
nsheets
# add data from Google sheet to tibble
for (i in 1:(nsheets-1)) {
j <- sheets_read(as_id(coronaURL), sheet = i)
# if a variable doesn't exist in sheet, add it
j[setdiff(varlist,names(j))] <- NA
j %<>% select(varlist)
coronaData <- rbind(coronaData, j)
}
q()
q()
install.packages("fortunes")
fortunes::fortune()
q()
q()
q()
devtools::install_github("hadley/lazyeval")
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/lazyeval")
devtools::install_github("hadley/dplyr")
library(dplyr)
library("dplyr")
install.packages(c("hflights", "Lahman"))
install.packages("tidyverse")
library(tidyverse)
library(googledrive)
library(googlesheets4)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
library(htmlwidgets)
drive_deauth()
sheets_deauth()
coronaURL <- "https://docs.google.com/spreadsheets/d/1wQVypefm946ch4XDp37uZ-wartW4V7ILdg-qYiDXUHM"
nsheets <- sheets_get(as_id(coronaURL)) %>%
extract2(6) %>% # gets the sixth element in a list
nrow()
# j <- sheets_read(as_id(coronaURL), sheet = i)
# variables to retain or create
numvars <- c("Confirmed", "Deaths", "Recovered")
varlist <- c("Province/State", "Country/Region",
"Last Update", numvars)
# one cool trick to initialize a tibble
coronaData <- varlist %>%
map_dfr( ~tibble(!!.x := logical() ) )
# add data from Google sheet to tibble
for (i in 1:(nsheets-1)) {
j <- sheets_read(as_id(coronaURL), sheet = i)
# if a variable doesn't exist in sheet, add it
j[setdiff(varlist,names(j))] <- NA
j %<>% select(varlist)
coronaData <- rbind(coronaData, j)
}
# the first (earliest) sheet had different var names
for (i in (nsheets):(nsheets)) {
j <- sheets_read(as_id(coronaURL), sheet = i) %>%
mutate(`Last Update` = `Date last updated`)
# if a variable doesn't exist in sheet, add it
j[setdiff(varlist,names(j))] <- NA
j %<>% select(varlist)
coronaData <- rbind(coronaData, j)
}
coronaData %<>%
# a
mutate (`Province/State` = case_when(
(is.na(`Province/State`) &
(`Country/Region` == "Australia")) ~ "New South Wales",
(is.na(`Province/State`) &
(`Country/Region` == "Germany")) ~ "Bavaria",
TRUE ~ `Province/State`)) %>%
mutate (`Country/Region` = case_when(
`Province/State` == "Hong Kong" ~ "Hong Kong",
`Province/State` == "Taiwan" ~ "Taiwan",
`Province/State` == "Washington" ~ "US",
# b
is.na (`Country/Region`) ~ "Mainland China",
TRUE ~ `Country/Region`)) %>%
# c
mutate(place = ifelse(is.na(`Province/State`),
`Country/Region`,
paste0(`Province/State`,", ",
`Country/Region`))) %>%
# d
mutate(reportDate =
date(`Last Update`)) %>%
group_by(place,reportDate) %>%
# e
slice(which.max(`Last Update`)) %>%
select(-c(place,`Last Update`)) %>%
ungroup() %>%
# fill in missing dates for each place
# f
group_by(place) %>%
complete(reportDate = seq.Date(min(reportDate),
today(),
by="day")) %>%
fill(c(Confirmed,Deaths,Recovered,
`Country/Region`,`Province/State`)) %>%
# g
mutate_if(is.numeric, ~replace_na(., 0)) %>%
ungroup() %>%
# h
mutate(dropcase = ((!str_detect(`Province/State`,",")) &
(reportDate  > "2020-01-31") &
(`Country/Region` == "Canada" | `Country/Region` == "US"))) %>%
# dplyr called explicitly here because plotly has taken over 'filter'
dplyr::filter (!dropcase)
reportDate
place
p
install.packages("covr")
install.packages("Cairo")
setwd("~/Dropbox/ComputerProgramming/programminglanguages/r/covid19")
setwd("~/Dropbox/ComputerProgramming/programminglanguages/r/covid19")
library(googledrive)
library(googlesheets4)
library(tidyverse)
library(magrittr)
library(lubridate)
library(plotly)
library(htmlwidgets)
drive_deauth()
sheets_deauth()
coronaURL <- "https://docs.google.com/spreadsheets/d/1wQVypefm946ch4XDp37uZ-wartW4V7ILdg-qYiDXUHM"
nsheets <- sheets_get(as_id(coronaURL)) %>%
extract2(6) %>% # gets the sixth element in a list
nrow()
# j <- sheets_read(as_id(coronaURL), sheet = i)
coronaData %<>%
# a
mutate (`Province/State` = case_when(
(is.na(`Province/State`) &
(`Country/Region` == "Australia")) ~ "New South Wales",
(is.na(`Province/State`) &
(`Country/Region` == "Germany")) ~ "Bavaria",
TRUE ~ `Province/State`)) %>%
mutate (`Country/Region` = case_when(
`Province/State` == "Hong Kong" ~ "Hong Kong",
`Province/State` == "Taiwan" ~ "Taiwan",
`Province/State` == "Washington" ~ "US",
# b
is.na (`Country/Region`) ~ "Mainland China",
TRUE ~ `Country/Region`)) %>%
# c
mutate(place = ifelse(is.na(`Province/State`),
`Country/Region`,
paste0(`Province/State`,", ",
`Country/Region`))) %>%
# d
mutate(reportDate =
date(`Last Update`)) %>%
group_by(place,reportDate) %>%
# e
slice(which.max(`Last Update`)) %>%
select(-c(place,`Last Update`)) %>%
ungroup() %>%
# fill in missing dates for each place
# f
group_by(place) %>%
complete(reportDate = seq.Date(min(reportDate),
today(),
by="day")) %>%
fill(c(Confirmed,Deaths,Recovered,
`Country/Region`,`Province/State`)) %>%
# g
mutate_if(is.numeric, ~replace_na(., 0)) %>%
ungroup() %>%
# h
mutate(dropcase = ((!str_detect(`Province/State`,",")) &
(reportDate  > "2020-01-31") &
(`Country/Region` == "Canada" | `Country/Region` == "US"))) %>%
# dplyr called explicitly here because plotly has taken over 'filter'
dplyr::filter (!dropcase)
`Province/State` == "Hong Kong" ~ "Hong Kong",
(is.na(`Province/State`) &
(`Country/Region` == "Australia")) ~ "New South Wales",
coronaData %<>%
# a
mutate (`Province/State` = case_when(
(is.na(`Province/State`) &
(`Country/Region` == "Australia")) ~ "New South Wales",
(is.na(`Province/State`) &
(`Country/Region` == "Germany")) ~ "Bavaria",
TRUE ~ `Province/State`)) %>%
mutate (`Country/Region` = case_when(
`Province/State` == "Hong Kong" ~ "Hong Kong",
`Province/State` == "Taiwan" ~ "Taiwan",
`Province/State` == "Washington" ~ "US",
# b
is.na (`Country/Region`) ~ "Mainland China",
TRUE ~ `Country/Region`)) %>%
# c
mutate(place = ifelse(is.na(`Province/State`),
`Country/Region`,
paste0(`Province/State`,", ",
`Country/Region`))) %>%
# d
mutate(reportDate =
as.Date(`Last Update`)) %>%
group_by(place,reportDate) %>%
# e
slice(which.max(`Last Update`)) %>%
select(-c(place,`Last Update`)) %>%
ungroup() %>%
# fill in missing dates for each place
# f
group_by(place) %>%
complete(reportDate = seq.Date(min(reportDate),
today(),
by="day")) %>%
fill(c(Confirmed,Deaths,Recovered,
`Country/Region`,`Province/State`)) %>%
# g
mutate_if(is.numeric, ~replace_na(., 0)) %>%
ungroup() %>%
# h
mutate(dropcase = ((!str_detect(`Province/State`,",")) &
(reportDate  > "2020-01-31") &
(`Country/Region` == "Canada" | `Country/Region` == "US"))) %>%
# dplyr called explicitly here because plotly has taken over 'filter'
dplyr::filter (!dropcase)
`Province/State` == "Hong Kong" ~ "Hong Kong",
coronaData %<>%
# a
mutate (`Province/State` = case_when(
(is.na(`Province/State`) &
(`Country/Region` == "Australia")) ~ "New South Wales",
(is.na(`Province/State`) &
(`Country/Region` == "Germany")) ~ "Bavaria",
TRUE ~ `Province/State`)) %>%
mutate (`Country/Region` = case_when(
`Province/State` == "Hong Kong" ~ "Hong Kong",
`Province/State` == "Taiwan" ~ "Taiwan",
`Province/State` == "Washington" ~ "US",
# b
is.na (`Country/Region`) ~ "Mainland China",
TRUE ~ `Country/Region`)) %>%
# c
mutate(place = ifelse(is.na(`Province/State`),
`Country/Region`,
paste0(`Province/State`,", ",
`Country/Region`))) %>%
# d
mutate(reportDate =
as.Date(`Last Update`)) %>%
group_by(place,reportDate) %>%
# e
slice(which.max(`Last Update`)) %>%
select(-c(place,`Last Update`)) %>%
ungroup() %>%
# fill in missing dates for each place
# f
group_by(place) %>%
complete(reportDate = seq.Date(min(reportDate),
today(),
by="day")) %>%
fill(c(Confirmed,Deaths,Recovered,
`Country/Region`,`Province/State`)) %>%
# g
mutate_if(is.numeric, ~replace_na(., 0)) %>%
ungroup() %>%
# h
mutate(dropcase = ((!str_detect(`Province/State`,",")) &
(reportDate  > as.Date("2020-01-31")) &
(`Country/Region` == "Canada" | `Country/Region` == "US"))) %>%
# dplyr called explicitly here because plotly has taken over 'filter'
dplyr::filter (!dropcase)
